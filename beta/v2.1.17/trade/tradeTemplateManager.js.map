{"version":3,"sources":["../../../../src/trade/tradeTemplateManager.es6"],"names":["define","$","chartWindow","rv","_","require","local_storage","get","set","TradeTemplateManager","root","dialog","_this","templates","forEach","tmpl","random","template_type","setRandom","state","init_state","append","html","i18n","view","bind","route","value","menu","array","save_as_value","rename_tmpl","rename_value","current","current_tmpl","get_template","findIndex","t","update","save_as","name","categories_value","capitalize","categoriy_displays_selected","save_changes","inx","push","growl","notice","message","open_file_selector","event","find","click","upload","file","target","files","reader","FileReader","onload","e","contents","result","data","JSON","parse","substring","replace","hash","isDuplicate","error","map","includes","apply","readAsText","preventDefault","set_template","download","json","stringify","console","log","download_file_in_browser","remove","filter","rename","do_rename","new_name","hide_template_menu","confirm","action","currentTarget","text","confirm_prevMenu","confirm_text","confirm_yes","confirm_no","hashCode","s","split","reduce","a","b","charCodeAt","tmpl_copy","unbind","init"],"mappings":"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","file":"tradeTemplateManager.js","sourcesContent":["/**\n * Created by amin on July 31, 2016.\n */\ndefine(['jquery', 'charts/chartWindow', 'common/rivetsExtra', 'lodash'], function($, chartWindow, rv, _) {\n  require(['text!trade/tradeTemplateManager.html']);\n\n  if(!local_storage.get('trade-templates')) {\n    local_storage.set('trade-templates', []);\n  }\n\n  class TradeTemplateManager {\n    constructor(root, dialog) {\n      const _this = this;\n      const templates = local_storage.get(\"trade-templates\");\n      templates.forEach(function(tmpl){\n        if(!tmpl.random || !tmpl.template_type){\n          tmpl = _this.setRandom(tmpl);\n        }\n      });\n      local_storage.set(\"trade-templates\", templates);\n      const state = this.init_state(root, dialog);\n      require(['text!trade/tradeTemplateManager.html'], html => {\n        root.append(html.i18n());\n        this.view = rv.bind(root[0], state);\n      });\n    }\n\n    init_state(root, dialog) {\n      const state = {\n        route: { value: 'menu' },\n        menu: {\n        },\n        templates: {\n          array: local_storage.get('trade-templates'),\n          save_as_value: '',\n          rename_tmpl: null,\n          rename_value: '',\n          current: null,\n        }\n      };\n      const {route, templates, menu} = state;\n\n      /* persist applied templates between page reloads */\n      const current_tmpl = this.setRandom(dialog.get_template());\n      templates.array = local_storage.get(\"templates\");\n      if(_.findIndex(templates.array, t => t.random === current_tmpl.random) !== -1) {\n        templates.current = current_tmpl;\n      }\n\n      route.update = value => {\n        route.value = value;\n      };\n\n      menu.save_as = () => {\n        const tmpl = dialog.get_template();\n        tmpl.name = `${tmpl.categories_value} ${_.capitalize(tmpl.categoriy_displays_selected)}`;\n        templates.save_as_value = tmpl.name;\n        route.update('save-as');\n      }\n\n      menu.templates = () => {\n        templates.array = local_storage.get('trade-templates'); // it can be modified from other dialogs.\n        route.update('templates');\n      }\n\n      menu.save_changes = () => {\n        const current = this.setRandom(dialog.get_template());\n        const name = current.name;\n        const array = local_storage.get('trade-templates');\n        const inx = _.findIndex(array, t => t.name === name);\n        if(inx !== -1) {\n          array[inx] = current;\n        } else {\n          array.push(current);\n        }\n        local_storage.set('trade-templates', array);\n        templates.array = array;\n        templates.current = current;\n        $.growl.notice({message: 'Template changes saved '.i18n() + '(' + current.name + ')'});\n      }\n\n      menu.open_file_selector = (event) => {\n        $(root).find(\"input[type=file]\").click();\n      }\n\n      menu.upload = (event) => {\n        const _this = this;\n        const file = event.target.files[0];\n        event.target.value = null;\n        if(!file)\n          return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          const contents = e.target.result;\n          const array = local_storage.get(\"trade-templates\");\n          let data = null;\n          try{\n            data = JSON.parse(contents);\n            data.name = data.name.substring(0,20).replace(/[<>]/g,\"-\");\n            const hash = data.random;\n            data = _this.setRandom(data);\n            if(hash !== data.random){\n              throw \"Invalid JSON file\".i18n();\n            }\n            if(_this.isDuplicate(data, array)){\n              return;\n            }\n            if(data.template_type !== 'trade-template') {\n              throw \"Invalid template type.\".i18n();\n            }\n          } catch(e){\n            $.growl.error({message:e});\n            return;\n          }\n\n          // Rename duplicate template names.\n          let file = 1,\n              name = data.name;\n          while(1){\n            if(array.map(t => t.name).includes(name)) {\n              name = data.name + \" (\" + file + \")\"\n              file++;\n              continue;\n            }\n            data.name = name;\n            break;\n          }\n\n          templates.apply(data);\n          array.push(data);\n          local_storage.set('trade-templates', array);\n          templates.array = array;\n          $.growl.notice({message: \"Successfully applied the template and saved it as \".i18n() + \"<b>\" + data.name + \"</b>\"});\n        }\n\n        reader.readAsText(file);\n      }\n\n      templates.save_as = (event) => {\n        event.preventDefault();\n        const name = templates.save_as_value.substring(0,20).replace(/[<>]/g,\"-\");\n        const tmpl = this.setRandom(dialog.get_template());\n        if(tmpl) {\n          tmpl.name = name;\n          const array = local_storage.get('trade-templates');\n          if(array.map(t => t.name).includes(name)) {\n            $.growl.error({message: 'Template name already exists'.i18n() });\n            return;\n          }\n\n          if(this.isDuplicate(tmpl, array)){\n            return;\n          }\n          array.push(tmpl);\n          templates.current = tmpl;\n          local_storage.set('trade-templates', array);\n          templates.array = array;\n          route.update('menu');\n          dialog.set_template(tmpl);\n        }\n      }\n\n      templates.download = (tmpl) => {\n        var json = JSON.stringify(tmpl);\n        console.log(tmpl);\n        download_file_in_browser(tmpl.name + '.json', 'text/json;charset=utf-8;', json);\n        $.growl.notice({message: \"Downloading template as <b>\".i18n() + tmpl.name + \".json</b>\"});\n      }\n\n      templates.remove = (tmpl) => {\n        let array = local_storage.get('trade-templates');\n        templates.array = array.filter(t => t.name !== tmpl.name);\n        local_storage.set('trade-templates', templates.array);\n        if(templates.current && tmpl.name === templates.current.name) {\n          templates.current = null;\n        }\n      }\n\n      templates.rename = tmpl => {\n        templates.rename_value = tmpl.name;\n        templates.rename_tmpl = tmpl;\n        route.update('rename');\n      }\n\n      templates.do_rename = (event) => {\n        event.preventDefault();\n        const name = templates.rename_tmpl.name;\n        const new_name = templates.rename_value.substring(0,20).replace(/[<>]/g,\"-\");\n        const array = local_storage.get('trade-templates');\n        if(array.map(t => t.name).includes(new_name)) {\n            $.growl.error({message: 'Template name already exists'.i18n() });\n            return;\n        };\n        const tmpl = array.find(t => t.name === name);\n        if(tmpl) {\n          tmpl.name = new_name;\n          local_storage.set('trade-templates', array);\n          templates.array = array;\n          route.update('templates');\n\n          /* update template name in current dialog */\n          const current = this.setRandom(dialog.get_template());\n          if(current.random == tmpl.random) {\n            current.name = new_name\n            dialog.set_template(current);\n            templates.current = current;\n          }\n        }\n      }\n\n      templates.apply = tmpl => {\n        dialog.set_template(tmpl);\n        templates.current = tmpl;\n        route.update('menu');\n        dialog.hide_template_menu();\n      }\n\n      templates.confirm = (tmpl, event) => {\n        route.update(\"confirm\");\n        const action = event.currentTarget.text;\n        templates.confirm_prevMenu = action === \"Delete\".i18n() ? \"templates\" : \"menu\";\n        templates.confirm_text = action === \"Delete\".i18n() ? \"Are you sure you want to delete template?\".i18n() : \"Are you sure you want to overwrite current template?\".i18n();\n\n        templates.confirm_yes = () => {\n          if(action === \"Delete\".i18n()) {\n            templates.remove(tmpl)\n            if(templates.current === tmpl)\n              templates.current = null;\n          }\n          else {\n            menu.save_changes();\n          }\n          templates.confirm_no();\n        }\n\n        templates.confirm_no = () => {\n          route.update(templates.confirm_prevMenu);\n        }\n      }\n\n      return state;\n    }\n\n    setRandom(tmpl) {\n      const name = tmpl.name;\n      delete tmpl.name;\n      delete tmpl.random;\n      tmpl.template_type = 'trade-template';\n      tmpl.random = this.hashCode(JSON.stringify(tmpl));\n      tmpl.name = name;\n      return tmpl;\n    }\n\n    hashCode(s) {\n      return s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);\n    }\n\n    isDuplicate(tmpl, array){\n      // get template with same values.\n      const tmpl_copy = _.find(array, ['random', tmpl.random]);\n      if(tmpl_copy){\n        $.growl.error({message: 'Template already saved as '.i18n() +'<b>' + tmpl_copy.name + '</b>.'});\n        return true;\n      }\n      return false;\n    }\n\n    unbind() {\n      this.view && this.view.unbind();\n      this.view = null;\n    }\n  }\n\n  return {\n    init: (root, dialog) => new TradeTemplateManager(root, dialog)\n  }\n});\n"]}