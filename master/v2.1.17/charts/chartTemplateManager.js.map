{"version":3,"sources":["../../../../src/charts/chartTemplateManager.es6"],"names":["define","$","chartWindow","rv","require","local_storage","get","set","ChartTemplateManager","root","dialog_id","state","init_state","append","html","i18n","view","bind","chart","highcharts","route","value","menu","save_changes_disabled","templates","array","save_as_value","rename_tmpl","rename_value","current","current_tmpl","get_chart_options","_","findIndex","t","name","update","save_as","options","timePeriod","type","concat","indicators","map","ind","overlays","overlay","displaySymbol","join","substring","save_changes","inx","push","growl","notice","message","text","open_file_selector","event","find","click","upload","file","target","files","reader","FileReader","onload","e","contents","result","data","JSON","parse","hash","random","hashCode","stringify","UserException","error","console","log","apply","unique","includes","readAsText","preventDefault","set_chart_options","download","tmpl","json","download_file_in_browser","remove","filter","rename","do_rename","new_name","apply_chart_options","confirm","action","currentTarget","confirm_prevMenu","confirm_text","confirm_yes","confirm_no","s","split","reduce","a","b","charCodeAt","unbind","init"],"mappings":"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","file":"chartTemplateManager.js","sourcesContent":["/**\n * Created by amin on July 31, 2016.\n */\ndefine(['jquery', 'charts/chartWindow', 'common/rivetsExtra'], function($, chartWindow, rv) {\n  require(['text!charts/chartTemplateManager.html']);\n\n  if(!local_storage.get('templates')) {\n    local_storage.set('templates', []);\n  }\n\n  class ChartTemplateManager {\n    constructor(root, dialog_id) {\n      const state = this.init_state(root, dialog_id);\n      require(['text!charts/chartTemplateManager.html'], html => {\n        root.append(html.i18n());\n        this.view = rv.bind(root[0], state);\n      });\n    }\n\n    init_state(root, dialog_id) {\n      const chart = $('#' + dialog_id + '_chart').highcharts();\n      const state = {\n        route: { value: 'menu' },\n        menu: {\n          save_changes_disabled: true\n        },\n        templates: {\n          array: local_storage.get('templates'),\n          save_as_value: '',\n          rename_tmpl: null,\n          rename_value: '',\n          current: null,\n        }\n      };\n      const {route, templates, menu} = state;\n\n      /* persist applied templates between page reloads */\n      const current_tmpl = chartWindow.get_chart_options(dialog_id);\n      if(_.findIndex(templates.array, t => t.name === current_tmpl.name) !== -1) {\n        templates.current = current_tmpl;\n      }\n\n      route.update = value => {\n        route.value = value;\n      };\n\n      menu.save_as = () => {\n        const options = chartWindow.get_chart_options(dialog_id) || {};\n        options.name = [`${options.timePeriod} ${options.type}`]\n                      .concat(options.indicators.map(ind => ind.name))\n                      .concat(options.overlays.map(overlay => overlay.displaySymbol))\n                      .join(' + ');\n        templates.save_as_value = options.name.substring(0,20);\n        route.update('save-as');\n      }\n\n      menu.templates = () => {\n        templates.array = local_storage.get('templates'); // it can be modified from other dialogs.\n        route.update('templates');\n      }\n\n      menu.save_changes = () => {\n        const current = chartWindow.get_chart_options(dialog_id);\n\n        const name = current.name;\n        const array = local_storage.get('templates');\n        const inx = _.findIndex(array, t => t.name === name);\n        if(inx !== -1) {\n          array[inx] = current;\n        } else {\n          array.push(current);\n        }\n        local_storage.set('templates', array);\n        templates.array = array;\n        templates.current = current;\n        $.growl.notice({message: $(\"<div/>\").text('Template changes saved '.i18n() + '(' + current.name + ')').html()});\n      }\n\n      menu.open_file_selector = (event) => {\n        $(root).find(\"input[type=file]\").click();\n      }\n\n      menu.upload = (event) => {\n        const file = event.target.files[0];\n        if(!file)\n          return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          const contents = e.target.result;\n          let data = null;\n          try{\n           data = JSON.parse(contents);\n           const hash = data.random;\n           delete data.random;\n           if(hash !== hashCode(JSON.stringify(data))){\n            throw new UserException(\"InvalidHash\");;\n           }\n           if(!data.indicators) {\n             // We are not adding .template_type because we don't want to break\n             // exising user templates for charts, so if it has .indicators property\n             // then it's a chart template for sure.\n            $.growl.error({message:\"Invalid template type.\".i18n()});\n            return;\n           }\n          } catch(e){\n            $.growl.error({message:\"Invalid json file.\".i18n()});\n            return;\n          }\n          console.log(templates.current);\n          templates.apply(data);\n          const array = local_storage.get('templates');;\n          let unique = false,\n              file = 1,\n              name = data.name;\n          while(!unique){\n            if(array.map(t => t.name).includes(name)) {\n              name = data.name + \" (\" + file + \")\"\n              file++;\n              continue;\n            }\n            data.name = name;\n            unique = true;\n          }\n\n          array.push(data);\n          local_storage.set('templates', array);\n          templates.array = array;\n          $.growl.notice({message: \"Successfully applied the template and saved it as \".i18n() + \"<b>\" + data.name + \"</b>\"});\n        }\n\n        reader.readAsText(file);\n      }\n\n      templates.save_as = (event) => {\n        event.preventDefault();\n        const name = templates.save_as_value.substring(0,20);\n        const options = chartWindow.get_chart_options(dialog_id);\n        if(options) {\n          options.name = name;\n          const array = local_storage.get('templates');\n          if(array.map(t => t.name).includes(name)) {\n            $.growl.error({message: 'Template name already exists'.i18n() });\n            return;\n          }\n          array.push(options);\n          templates.current = options;\n          local_storage.set('templates', array);\n          templates.array = array;\n          route.update('menu');\n          chartWindow.set_chart_options(dialog_id, options); /* update the name */\n        }\n      }\n\n      templates.download = (tmpl) => {\n        tmpl.random = hashCode(JSON.stringify(tmpl));\n        var json = JSON.stringify(tmpl);\n        download_file_in_browser(tmpl.name + '.json', 'text/json;charset=utf-8;', json);\n        $.growl.notice({message: \"Downloading template as <b>\".i18n() + tmpl.name + \".json</b>\"});\n      }\n\n      templates.remove = (tmpl) => {\n        let array = local_storage.get('templates');\n        templates.array = array.filter(t => t.name !== tmpl.name);\n        local_storage.set('templates', templates.array);\n        if(templates.current && tmpl.name === templates.current.name) {\n          templates.current = null;\n        }\n      }\n\n      templates.rename = tmpl => {\n        templates.rename_value = tmpl.name;\n        templates.rename_tmpl = tmpl;\n        route.update('rename');\n      }\n\n      templates.do_rename = (event) => {\n        event.preventDefault();\n        const name = templates.rename_tmpl.name;\n        const new_name = templates.rename_value.substring(0,20);\n        const array = local_storage.get('templates');\n        if(array.map(t => t.name).includes(new_name)) {\n            $.growl.error({message: 'Template name already exists'.i18n() });\n            return;\n        };\n        const tmpl = array.find(t => t.name === name);\n        if(tmpl) {\n          tmpl.name = new_name;\n          local_storage.set('templates', array);\n          templates.array = array;\n          route.update('templates');\n\n          /* update template name in chartWindow options */\n          const current = chartWindow.get_chart_options(dialog_id);\n          if(current.name == name) {\n            templates.current = current;\n            current.name = new_name;\n            chartWindow.set_chart_options(dialog_id, current);\n          }\n        }\n      }\n\n      templates.apply = tmpl => {\n        chartWindow.apply_chart_options(dialog_id, tmpl);\n        templates.current = tmpl;\n      }\n\n      templates.confirm = (tmpl, event) => {\n        if(!templates.current)\n          return;\n        route.update(\"confirm\");\n        const action = event.currentTarget.text;\n        templates.confirm_prevMenu = action === \"Delete\".i18n() ? \"templates\" : \"menu\";\n        templates.confirm_text = action === \"Delete\" ? \"Are you sure you want to delete template?\".i18n() : \"Are you sure you want to overwrite current template?\".i18n();\n\n        templates.confirm_yes = () => {\n          action === \"Delete\".i18n()? templates.remove(tmpl) : menu.save_changes();\n          templates.confirm_no();\n        }\n\n        templates.confirm_no = () => {\n          route.update(templates.confirm_prevMenu);\n        }\n      }\n\n      const hashCode = (s) => {\n        return s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);\n      }\n\n      return state;\n    }\n\n    unbind() {\n      this.view && this.view.unbind();\n      this.view = null;\n    }\n  }\n\n  return {\n    init: (root, dialog_id) => new ChartTemplateManager(root, dialog_id)\n  }\n});\n"]}